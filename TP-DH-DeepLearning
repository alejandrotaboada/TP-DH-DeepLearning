{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from keras import models\n",
    "from keras import layers\n",
    "from keras import optimizers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from PIL import Image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 54
    },
    "colab_type": "code",
    "id": "CETHHY3YVb1w",
    "outputId": "d12f7a3b-00e7-4717-9a2e-be4af31cf8c9",
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'2.2.4'"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import keras\n",
    "keras.__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "3AXOxwebVb15"
   },
   "source": [
    "# Usando una convnet pre-entrenada"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "collapsed": true,
    "id": "x8km1hQEKEzV"
   },
   "outputs": [],
   "source": [
    "import os, shutil"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### os.chdir()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/alejandrotaboada/Desktop/Pruebas Python/Proyecto'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "bQNIbvyYJ8dq"
   },
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: './kaggle_original_data/train/cat.0.jpg'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-7-6a87de8274fc>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     44\u001b[0m     \u001b[0msrc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moriginal_dataset_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m     \u001b[0mdst\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_cats_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 46\u001b[0;31m     \u001b[0mshutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopyfile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     47\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     48\u001b[0m \u001b[0;31m# Las siguientes 500 a validation_cats_dir\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/shutil.py\u001b[0m in \u001b[0;36mcopyfile\u001b[0;34m(src, dst, follow_symlinks)\u001b[0m\n\u001b[1;32m    118\u001b[0m         \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msymlink\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadlink\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    119\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 120\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'rb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfsrc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    121\u001b[0m             \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'wb'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfdst\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    122\u001b[0m                 \u001b[0mcopyfileobj\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfsrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfdst\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: './kaggle_original_data/train/cat.0.jpg'"
     ]
    }
   ],
   "source": [
    "# El path al directorio donde se descomprimió el dataset\n",
    "original_dataset_dir = './kaggle_original_data/train'\n",
    "\n",
    "# El directorio donde guardaremos el más pequeño\n",
    "base_dir = './cats_and_dogs_small'\n",
    "os.makedirs(base_dir, exist_ok=True)\n",
    "\n",
    "# Directorio para nuestro entrenamiento,\n",
    "# splits validacion y test\n",
    "train_dir = os.path.join(base_dir, 'train')\n",
    "os.makedirs(train_dir, exist_ok=True)\n",
    "validation_dir = os.path.join(base_dir, 'validation')\n",
    "os.makedirs(validation_dir, exist_ok=True)\n",
    "test_dir = os.path.join(base_dir, 'test')\n",
    "os.makedirs(test_dir, exist_ok=True)\n",
    "\n",
    "# Directorio con imagenes de entrenamiento de gatos\n",
    "train_cats_dir = os.path.join(train_dir, 'cats')\n",
    "os.makedirs(train_cats_dir, exist_ok=True)\n",
    "\n",
    "# Directorios con imagenes de entrenamiento de perros\n",
    "train_dogs_dir = os.path.join(train_dir, 'dogs')\n",
    "os.makedirs(train_dogs_dir, exist_ok=True)\n",
    "\n",
    "# Directorios con las imagenes de validacion de gatos\n",
    "validation_cats_dir = os.path.join(validation_dir, 'cats')\n",
    "os.makedirs(validation_cats_dir, exist_ok=True)\n",
    "\n",
    "# Directorios con las imagenes de validacion de perros\n",
    "validation_dogs_dir = os.path.join(validation_dir, 'dogs')\n",
    "os.makedirs(validation_dogs_dir, exist_ok=True)\n",
    "\n",
    "# Directorios con imagenes de test de gatos\n",
    "test_cats_dir = os.path.join(test_dir, 'cats')\n",
    "os.makedirs(test_cats_dir, exist_ok=True)\n",
    "\n",
    "# Directorio con las imagenes de test de perros\n",
    "test_dogs_dir = os.path.join(test_dir, 'dogs')\n",
    "os.makedirs(test_dogs_dir, exist_ok=True)\n",
    "\n",
    "# Copiamos las primeras 1000 imagenes de gatos a train_cats_dir\n",
    "fnames = ['cat.{}.jpg'.format(i) for i in range(1000)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_dataset_dir, fname)\n",
    "    dst = os.path.join(train_cats_dir, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "\n",
    "# Las siguientes 500 a validation_cats_dir\n",
    "fnames = ['cat.{}.jpg'.format(i) for i in range(1000, 1500)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_dataset_dir, fname)\n",
    "    dst = os.path.join(validation_cats_dir, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "    \n",
    "# Copiamos las sigueintes 500 a test_cats_dir\n",
    "fnames = ['cat.{}.jpg'.format(i) for i in range(1500, 2000)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_dataset_dir, fname)\n",
    "    dst = os.path.join(test_cats_dir, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "    \n",
    "# Copiamos las primeras 1000 imagenes de perros a train_dogs_dir\n",
    "fnames = ['dog.{}.jpg'.format(i) for i in range(1000)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_dataset_dir, fname)\n",
    "    dst = os.path.join(train_dogs_dir, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "    \n",
    "# Las siguientes 500 a validation_dogs_dir\n",
    "fnames = ['dog.{}.jpg'.format(i) for i in range(1000, 1500)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_dataset_dir, fname)\n",
    "    dst = os.path.join(validation_dogs_dir, fname)\n",
    "    shutil.copyfile(src, dst)\n",
    "    \n",
    "# Y las siguientes 500 a test_dogs_dir\n",
    "fnames = ['dog.{}.jpg'.format(i) for i in range(1500, 2000)]\n",
    "for fname in fnames:\n",
    "    src = os.path.join(original_dataset_dir, fname)\n",
    "    dst = os.path.join(test_dogs_dir, fname)\n",
    "    shutil.copyfile(src, dst)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "XhK1PjoAVb16"
   },
   "source": [
    "## Feature extraction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "IFsjA0bVVb16"
   },
   "source": [
    "Instanciamos el modelo VGG16:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 128
    },
    "colab_type": "code",
    "collapsed": true,
    "id": "-JItwqm8Vb18",
    "outputId": "b575daa5-7d9e-4c04-a21d-08b40f0f024e"
   },
   "outputs": [],
   "source": [
    "from keras.applications import VGG16\n",
    "\n",
    "conv_base = VGG16(weights='imagenet',\n",
    "                  include_top=False,\n",
    "                  input_shape=(150, 150, 3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "dKe_z1gKVb1-"
   },
   "source": [
    "Veamos la base convolucional de VGG16:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 835
    },
    "colab_type": "code",
    "id": "Pp8sjcNMVb1-",
    "outputId": "d0d3356a-041e-4b7a-e138-584c6cd4f6bb"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_1 (InputLayer)         (None, 150, 150, 3)       0         \n",
      "_________________________________________________________________\n",
      "block1_conv1 (Conv2D)        (None, 150, 150, 64)      1792      \n",
      "_________________________________________________________________\n",
      "block1_conv2 (Conv2D)        (None, 150, 150, 64)      36928     \n",
      "_________________________________________________________________\n",
      "block1_pool (MaxPooling2D)   (None, 75, 75, 64)        0         \n",
      "_________________________________________________________________\n",
      "block2_conv1 (Conv2D)        (None, 75, 75, 128)       73856     \n",
      "_________________________________________________________________\n",
      "block2_conv2 (Conv2D)        (None, 75, 75, 128)       147584    \n",
      "_________________________________________________________________\n",
      "block2_pool (MaxPooling2D)   (None, 37, 37, 128)       0         \n",
      "_________________________________________________________________\n",
      "block3_conv1 (Conv2D)        (None, 37, 37, 256)       295168    \n",
      "_________________________________________________________________\n",
      "block3_conv2 (Conv2D)        (None, 37, 37, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_conv3 (Conv2D)        (None, 37, 37, 256)       590080    \n",
      "_________________________________________________________________\n",
      "block3_pool (MaxPooling2D)   (None, 18, 18, 256)       0         \n",
      "_________________________________________________________________\n",
      "block4_conv1 (Conv2D)        (None, 18, 18, 512)       1180160   \n",
      "_________________________________________________________________\n",
      "block4_conv2 (Conv2D)        (None, 18, 18, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block4_conv3 (Conv2D)        (None, 18, 18, 512)       2359808   \n",
      "_________________________________________________________________\n",
      "block4_pool (MaxPooling2D)   (None, 9, 9, 512)         0         \n",
      "_________________________________________________________________\n",
      "block5_conv1 (Conv2D)        (None, 9, 9, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv2 (Conv2D)        (None, 9, 9, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_conv3 (Conv2D)        (None, 9, 9, 512)         2359808   \n",
      "_________________________________________________________________\n",
      "block5_pool (MaxPooling2D)   (None, 4, 4, 512)         0         \n",
      "=================================================================\n",
      "Total params: 14,714,688\n",
      "Trainable params: 14,714,688\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "conv_base.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "2lyMxLxrVb2B"
   },
   "source": [
    "El mapa de features final tiene forma `(4, 4, 512)`. Vamos a usarlo como entrada para un clasificador densamente conectado.\n",
    "\n",
    "En este punto tenemos dos maneras para proceder:\n",
    "\n",
    "* Correr la base convolucional sobre nuestro dataset, guardar su salida en una matriz Numpy en el disco, y luego usar esta información como entrada para un clasificador densamente conectado e independiente similar a los que ya vimos.\n",
    "\n",
    "* Extender el modelo que tenemos agregando capas densas en la parte superior, y entrenar la red de punta a punta sobre los datos de entrada.\n",
    "\n",
    "Primero veremos la tecnica de feature extraction:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 72
    },
    "colab_type": "code",
    "id": "R5PCL-RoVb2D",
    "outputId": "5ab25b93-0430-4b8c-a23b-246cb7edac05"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 160 images belonging to 2 classes.\n",
      "Found 80 images belonging to 2 classes.\n",
      "Found 80 images belonging to 2 classes.\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-11-d65e40acf8e9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0mtrain_features\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextract_features\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m \u001b[0mvalidation_features\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalidation_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextract_features\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalidation_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m \u001b[0mtest_features\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_labels\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mextract_features\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtest_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-11-d65e40acf8e9>\u001b[0m in \u001b[0;36mextract_features\u001b[0;34m(directory, sample_count)\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0mi\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0minputs_batch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabels_batch\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mgenerator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m         \u001b[0mfeatures_batch\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mconv_base\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs_batch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m         \u001b[0mfeatures\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mbatch_size\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfeatures_batch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m         \u001b[0mlabels\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mbatch_size\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlabels_batch\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, batch_size, verbose, steps)\u001b[0m\n\u001b[1;32m   1167\u001b[0m                                             \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1168\u001b[0m                                             \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1169\u001b[0;31m                                             steps=steps)\n\u001b[0m\u001b[1;32m   1170\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1171\u001b[0m     def train_on_batch(self, x, y,\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/keras/engine/training_arrays.py\u001b[0m in \u001b[0;36mpredict_loop\u001b[0;34m(model, f, ins, batch_size, verbose, steps)\u001b[0m\n\u001b[1;32m    292\u001b[0m                 \u001b[0mins_batch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mins_batch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    293\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 294\u001b[0;31m             \u001b[0mbatch_outs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins_batch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    295\u001b[0m             \u001b[0mbatch_outs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_outs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    296\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mbatch_index\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   2719\u001b[0m                     \u001b[0;34m'In order to feed symbolic tensors to a Keras model '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2720\u001b[0m                     'in TensorFlow, you need tensorflow 1.8 or higher.')\n\u001b[0;32m-> 2721\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_legacy_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2722\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2723\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py\u001b[0m in \u001b[0;36m_legacy_call\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   2691\u001b[0m         \u001b[0msession\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2692\u001b[0m         updated = session.run(fetches=fetches, feed_dict=feed_dict,\n\u001b[0;32m-> 2693\u001b[0;31m                               **self.session_kwargs)\n\u001b[0m\u001b[1;32m   2694\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mupdated\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2695\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    903\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    904\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[0;32m--> 905\u001b[0;31m                          run_metadata_ptr)\n\u001b[0m\u001b[1;32m    906\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    907\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1138\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfinal_fetches\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mfinal_targets\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mfeed_dict_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1139\u001b[0m       results = self._do_run(handle, final_targets, final_fetches,\n\u001b[0;32m-> 1140\u001b[0;31m                              feed_dict_tensor, options, run_metadata)\n\u001b[0m\u001b[1;32m   1141\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1142\u001b[0m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_run\u001b[0;34m(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1319\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mhandle\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1320\u001b[0m       return self._do_call(_run_fn, feeds, fetches, targets, options,\n\u001b[0;32m-> 1321\u001b[0;31m                            run_metadata)\n\u001b[0m\u001b[1;32m   1322\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1323\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_prun_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeeds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_call\u001b[0;34m(self, fn, *args)\u001b[0m\n\u001b[1;32m   1325\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_do_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1326\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1327\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1328\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOpError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1329\u001b[0m       \u001b[0mmessage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run_fn\u001b[0;34m(feed_dict, fetch_list, target_list, options, run_metadata)\u001b[0m\n\u001b[1;32m   1310\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_extend_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1311\u001b[0m       return self._call_tf_sessionrun(\n\u001b[0;32m-> 1312\u001b[0;31m           options, feed_dict, fetch_list, target_list, run_metadata)\n\u001b[0m\u001b[1;32m   1313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1314\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_prun_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_call_tf_sessionrun\u001b[0;34m(self, options, feed_dict, fetch_list, target_list, run_metadata)\u001b[0m\n\u001b[1;32m   1418\u001b[0m         return tf_session.TF_Run(\n\u001b[1;32m   1419\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_session\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_list\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1420\u001b[0;31m             status, run_metadata)\n\u001b[0m\u001b[1;32m   1421\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1422\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_tf_sessionprun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "base_dir = '/Users/alejandrotaboada/Desktop/Pruebas Python/Proyecto'\n",
    "\n",
    "train_dir = os.path.join(base_dir, 'train')\n",
    "validation_dir = os.path.join(base_dir, 'validation')\n",
    "test_dir = os.path.join(base_dir, 'test')\n",
    "\n",
    "datagen = ImageDataGenerator(rescale=1./255)\n",
    "batch_size = 20\n",
    "\n",
    "def extract_features(directory, sample_count):\n",
    "    features = np.zeros(shape=(sample_count, 4, 4, 512))\n",
    "    labels = np.zeros(shape=(sample_count))\n",
    "    generator = datagen.flow_from_directory(\n",
    "        directory,\n",
    "        target_size=(150, 150),\n",
    "        batch_size=batch_size,\n",
    "        class_mode='binary')\n",
    "    i = 0\n",
    "    for inputs_batch, labels_batch in generator:\n",
    "        features_batch = conv_base.predict(inputs_batch)\n",
    "        features[i * batch_size : (i + 1) * batch_size] = features_batch\n",
    "        labels[i * batch_size : (i + 1) * batch_size] = labels_batch\n",
    "        i += 1\n",
    "        if i * batch_size >= sample_count:\n",
    "            # Notar que este generador devuelve data indefinidamente en un loop,\n",
    "            # debemos cortarlo con un \"break\" despues de que cada imagen haya sido vista una vez\n",
    "            break\n",
    "    return features, labels\n",
    "\n",
    "train_features, train_labels = extract_features(train_dir, 2000)\n",
    "validation_features, validation_labels = extract_features(validation_dir, 1000)\n",
    "test_features, test_labels = extract_features(test_dir, 1000)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "b34mxtJtVb2F"
   },
   "source": [
    "Las features extraidas son de forma `(samples, 4, 4, 512)`. Con ellas vamos a alimentar un clasificador densamente conectado asi que priero tenemos que aplanarlas a la forma `(samples, 8192)`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "collapsed": true,
    "id": "hSquTbSIVb2F"
   },
   "outputs": [],
   "source": [
    "train_features = np.reshape(train_features, (2000, 4 * 4 * 512))\n",
    "validation_features = np.reshape(validation_features, (1000, 4 * 4 * 512))\n",
    "test_features = np.reshape(test_features, (1000, 4 * 4 * 512))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Z_QeM2XaVb2H"
   },
   "source": [
    "Ahora definimos el clasificador y entrenamos el modelo:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1255
    },
    "colab_type": "code",
    "id": "DbXMrbuzVb2H",
    "outputId": "372347d4-3447-44f8-ca58-fed551dff4db"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py:3445: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n",
      "WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/math_ops.py:3066: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n",
      "Train on 2000 samples, validate on 1000 samples\n",
      "Epoch 1/30\n",
      "2000/2000 [==============================] - 2s 771us/step - loss: 0.5902 - acc: 0.6755 - val_loss: 0.4527 - val_acc: 0.8330\n",
      "Epoch 2/30\n",
      "2000/2000 [==============================] - 1s 289us/step - loss: 0.4326 - acc: 0.8010 - val_loss: 0.3685 - val_acc: 0.8640\n",
      "Epoch 3/30\n",
      "2000/2000 [==============================] - 1s 286us/step - loss: 0.3523 - acc: 0.8560 - val_loss: 0.3270 - val_acc: 0.8790\n",
      "Epoch 4/30\n",
      "2000/2000 [==============================] - 1s 289us/step - loss: 0.3153 - acc: 0.8695 - val_loss: 0.3082 - val_acc: 0.8790\n",
      "Epoch 5/30\n",
      "2000/2000 [==============================] - 1s 287us/step - loss: 0.2891 - acc: 0.8865 - val_loss: 0.2888 - val_acc: 0.8890\n",
      "Epoch 6/30\n",
      "2000/2000 [==============================] - 1s 282us/step - loss: 0.2591 - acc: 0.9070 - val_loss: 0.2970 - val_acc: 0.8680\n",
      "Epoch 7/30\n",
      "2000/2000 [==============================] - 1s 292us/step - loss: 0.2516 - acc: 0.9030 - val_loss: 0.2704 - val_acc: 0.8950\n",
      "Epoch 8/30\n",
      "2000/2000 [==============================] - 1s 282us/step - loss: 0.2300 - acc: 0.9140 - val_loss: 0.2682 - val_acc: 0.8870\n",
      "Epoch 9/30\n",
      "2000/2000 [==============================] - 1s 289us/step - loss: 0.2200 - acc: 0.9180 - val_loss: 0.2621 - val_acc: 0.8890\n",
      "Epoch 10/30\n",
      "2000/2000 [==============================] - 1s 293us/step - loss: 0.2066 - acc: 0.9290 - val_loss: 0.2566 - val_acc: 0.8920\n",
      "Epoch 11/30\n",
      "2000/2000 [==============================] - 1s 286us/step - loss: 0.1965 - acc: 0.9300 - val_loss: 0.2537 - val_acc: 0.8970\n",
      "Epoch 12/30\n",
      "2000/2000 [==============================] - 1s 277us/step - loss: 0.1935 - acc: 0.9295 - val_loss: 0.2602 - val_acc: 0.8840\n",
      "Epoch 13/30\n",
      "2000/2000 [==============================] - 1s 289us/step - loss: 0.1781 - acc: 0.9345 - val_loss: 0.2550 - val_acc: 0.8870\n",
      "Epoch 14/30\n",
      "2000/2000 [==============================] - 1s 285us/step - loss: 0.1711 - acc: 0.9385 - val_loss: 0.2445 - val_acc: 0.9010\n",
      "Epoch 15/30\n",
      "2000/2000 [==============================] - 1s 284us/step - loss: 0.1667 - acc: 0.9365 - val_loss: 0.2502 - val_acc: 0.8920\n",
      "Epoch 16/30\n",
      "2000/2000 [==============================] - 1s 288us/step - loss: 0.1547 - acc: 0.9455 - val_loss: 0.2434 - val_acc: 0.9030\n",
      "Epoch 17/30\n",
      "2000/2000 [==============================] - 1s 280us/step - loss: 0.1480 - acc: 0.9480 - val_loss: 0.2426 - val_acc: 0.9000\n",
      "Epoch 18/30\n",
      "2000/2000 [==============================] - 1s 287us/step - loss: 0.1410 - acc: 0.9540 - val_loss: 0.2423 - val_acc: 0.8970\n",
      "Epoch 19/30\n",
      "2000/2000 [==============================] - 1s 271us/step - loss: 0.1407 - acc: 0.9530 - val_loss: 0.2414 - val_acc: 0.9000\n",
      "Epoch 20/30\n",
      "2000/2000 [==============================] - 1s 267us/step - loss: 0.1297 - acc: 0.9575 - val_loss: 0.2401 - val_acc: 0.9030\n",
      "Epoch 21/30\n",
      "2000/2000 [==============================] - 1s 261us/step - loss: 0.1282 - acc: 0.9550 - val_loss: 0.2422 - val_acc: 0.8990\n",
      "Epoch 22/30\n",
      "2000/2000 [==============================] - 1s 264us/step - loss: 0.1255 - acc: 0.9575 - val_loss: 0.2407 - val_acc: 0.8990\n",
      "Epoch 23/30\n",
      "2000/2000 [==============================] - 1s 262us/step - loss: 0.1179 - acc: 0.9590 - val_loss: 0.2414 - val_acc: 0.9010\n",
      "Epoch 24/30\n",
      "2000/2000 [==============================] - 1s 268us/step - loss: 0.1139 - acc: 0.9630 - val_loss: 0.2428 - val_acc: 0.9000\n",
      "Epoch 25/30\n",
      "2000/2000 [==============================] - 1s 261us/step - loss: 0.1081 - acc: 0.9660 - val_loss: 0.2410 - val_acc: 0.9000\n",
      "Epoch 26/30\n",
      "2000/2000 [==============================] - 1s 267us/step - loss: 0.1034 - acc: 0.9655 - val_loss: 0.2414 - val_acc: 0.8990\n",
      "Epoch 27/30\n",
      "2000/2000 [==============================] - 1s 260us/step - loss: 0.1009 - acc: 0.9665 - val_loss: 0.2559 - val_acc: 0.8930\n",
      "Epoch 28/30\n",
      "2000/2000 [==============================] - 1s 263us/step - loss: 0.0977 - acc: 0.9680 - val_loss: 0.2471 - val_acc: 0.9000\n",
      "Epoch 29/30\n",
      "2000/2000 [==============================] - 1s 270us/step - loss: 0.0967 - acc: 0.9715 - val_loss: 0.2487 - val_acc: 0.9010\n",
      "Epoch 30/30\n",
      "2000/2000 [==============================] - 1s 264us/step - loss: 0.0919 - acc: 0.9730 - val_loss: 0.2409 - val_acc: 0.8980\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "model = models.Sequential()\n",
    "model.add(layers.Dense(256, activation='relu', input_dim=4 * 4 * 512))\n",
    "model.add(layers.Dropout(0.5))\n",
    "model.add(layers.Dense(1, activation='sigmoid'))\n",
    "\n",
    "model.compile(optimizer=optimizers.RMSprop(lr=2e-5),\n",
    "              loss='binary_crossentropy',\n",
    "              metrics=['acc'])\n",
    "\n",
    "history = model.fit(train_features, train_labels,\n",
    "                    epochs=30,\n",
    "                    batch_size=20,\n",
    "                    validation_data=(validation_features, validation_labels))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ge6EOsoMVb2K"
   },
   "source": [
    "Vemos que el entrenamiento es muy rapido ya que solo ejecutamos dos layers densos.\n",
    "\n",
    "Revisemos loss y accuracy:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 545
    },
    "colab_type": "code",
    "id": "anrKoJ9_Vb2L",
    "outputId": "3a705d3b-21be-4e96-a4d3-81b45aceb7e5"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nCJJTvwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\niGSh/w9tVuh+tCsN2wAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "acc = history.history['acc']\n",
    "val_acc = history.history['val_acc']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "epochs = range(len(acc))\n",
    "\n",
    "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
    "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.legend()\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "9mcjaXtlVb2O"
   },
   "source": [
    "Ahora vamos a ver la segunda tenica, esta vez podremos aprovechar el data augmentation.\n",
    "\n",
    "Para crear este nuevo modelo simplemente agregamos las capas de salida al modelo `conv_base`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "collapsed": true,
    "id": "M7GqJEHOVb2Q"
   },
   "outputs": [],
   "source": [
    "from keras import models\n",
    "from keras import layers\n",
    "\n",
    "model = models.Sequential()\n",
    "model.add(conv_base)\n",
    "model.add(layers.Flatten())\n",
    "model.add(layers.Dense(256, activation='relu'))\n",
    "model.add(layers.Dense(1, activation='sigmoid'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "jKcZpXv3Vb2S"
   },
   "source": [
    "Esto es lo que obtenemos:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 290
    },
    "colab_type": "code",
    "id": "nTNuKOzCVb2T",
    "outputId": "d449b0a5-5c8d-41b1-de30-8e0fd832ea35"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "vgg16 (Model)                (None, 4, 4, 512)         14714688  \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 8192)              0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 256)               2097408   \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 1)                 257       \n",
      "=================================================================\n",
      "Total params: 16,812,353\n",
      "Trainable params: 16,812,353\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "HYdNJ741Vb2X"
   },
   "source": [
    "Vemos que la base convolucional de VGG16 tiene 14,714,688 parametros y el clasificador que estamos agregando tiene 2 millones mas.\n",
    "\n",
    "Antes de compilar y entrenar el modelo es importante \"Congelar\" los pesos de la base convolucional para evitar que se actualicen durante el entrenamiento.\n",
    "\n",
    "En Keras, para congelar una red se configura el atributo `trainable` en `False`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 35
    },
    "colab_type": "code",
    "id": "VhBptWPNVb2Y",
    "outputId": "2b994473-e69b-4b70-9f57-620643c9a75a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Este es el número de tensores de pesos entrenables antes de freezar la base convolucional: 30\n"
     ]
    }
   ],
   "source": [
    "print('Este es el número de tensores de pesos entrenables antes de freezar la base convolucional:', len(model.trainable_weights))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "collapsed": true,
    "id": "gSeIQLGJVb2c"
   },
   "outputs": [],
   "source": [
    "conv_base.trainable = False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 35
    },
    "colab_type": "code",
    "id": "Aqk5N97sVb2f",
    "outputId": "ab191594-21f5-44c4-933f-d1128803c641"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Este es el número de tensores de pesos entrenables después de freezar la base convolucional: 4\n"
     ]
    }
   ],
   "source": [
    "print('Este es el número de tensores de pesos entrenables después de freezar la base convolucional:', len(model.trainable_weights))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 290
    },
    "colab_type": "code",
    "id": "Hq1iI3xvOsxm",
    "outputId": "ef64ef1f-5acb-4d2f-9954-9c92ee52cd6d"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "vgg16 (Model)                (None, 4, 4, 512)         14714688  \n",
      "_________________________________________________________________\n",
      "flatten_1 (Flatten)          (None, 8192)              0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 256)               2097408   \n",
      "_________________________________________________________________\n",
      "dense_2 (Dense)              (None, 1)                 257       \n",
      "=================================================================\n",
      "Total params: 16,812,353\n",
      "Trainable params: 2,097,665\n",
      "Non-trainable params: 14,714,688\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "z2BLP33mVb2k"
   },
   "source": [
    "Ahora podemos comenzar a entrenar nuestro modelo, con la misma configuración de data augmentation que utilizamos en nuestro ejemplo anterior:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 1145
    },
    "colab_type": "code",
    "id": "baOPPnZcVb2k",
    "outputId": "eeb1c351-3f53-4fef-d4b6-1a250ed21771"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 160 images belonging to 2 classes.\n",
      "Found 80 images belonging to 2 classes.\n",
      "Epoch 1/20\n",
      "100/100 [==============================] - 403s 4s/step - loss: 0.1044 - acc: 0.9730 - val_loss: 0.0284 - val_acc: 1.0000\n",
      "Epoch 2/20\n",
      "100/100 [==============================] - 428s 4s/step - loss: 0.0909 - acc: 0.9760 - val_loss: 0.0166 - val_acc: 1.0000\n",
      "Epoch 3/20\n",
      "100/100 [==============================] - 470s 5s/step - loss: 0.0902 - acc: 0.9730 - val_loss: 0.0191 - val_acc: 1.0000\n",
      "Epoch 4/20\n",
      "100/100 [==============================] - 500s 5s/step - loss: 0.0846 - acc: 0.9720 - val_loss: 0.0124 - val_acc: 1.0000\n",
      "Epoch 5/20\n",
      "100/100 [==============================] - 483s 5s/step - loss: 0.0769 - acc: 0.9790 - val_loss: 0.0111 - val_acc: 1.0000\n",
      "Epoch 6/20\n",
      "100/100 [==============================] - 870s 9s/step - loss: 0.0777 - acc: 0.9810 - val_loss: 0.0100 - val_acc: 1.0000\n",
      "Epoch 7/20\n",
      "100/100 [==============================] - 434s 4s/step - loss: 0.0687 - acc: 0.9790 - val_loss: 0.0098 - val_acc: 1.0000\n",
      "Epoch 8/20\n",
      "100/100 [==============================] - 468s 5s/step - loss: 0.0687 - acc: 0.9790 - val_loss: 0.0115 - val_acc: 1.0000\n",
      "Epoch 9/20\n",
      "100/100 [==============================] - 497s 5s/step - loss: 0.0695 - acc: 0.9740 - val_loss: 0.0099 - val_acc: 1.0000\n",
      "Epoch 10/20\n",
      "100/100 [==============================] - 478s 5s/step - loss: 0.0638 - acc: 0.9790 - val_loss: 0.0087 - val_acc: 1.0000\n",
      "Epoch 11/20\n",
      "100/100 [==============================] - 483s 5s/step - loss: 0.0578 - acc: 0.9860 - val_loss: 0.0084 - val_acc: 1.0000\n",
      "Epoch 12/20\n",
      "100/100 [==============================] - 1080s 11s/step - loss: 0.0647 - acc: 0.9800 - val_loss: 0.0078 - val_acc: 1.0000\n",
      "Epoch 13/20\n",
      "100/100 [==============================] - 439s 4s/step - loss: 0.0524 - acc: 0.9870 - val_loss: 0.0081 - val_acc: 1.0000\n",
      "Epoch 14/20\n",
      "100/100 [==============================] - 470s 5s/step - loss: 0.0503 - acc: 0.9890 - val_loss: 0.0059 - val_acc: 1.0000\n",
      "Epoch 15/20\n",
      "100/100 [==============================] - 484s 5s/step - loss: 0.0512 - acc: 0.9820 - val_loss: 0.0061 - val_acc: 1.0000\n",
      "Epoch 16/20\n",
      "100/100 [==============================] - 486s 5s/step - loss: 0.0475 - acc: 0.9850 - val_loss: 0.0066 - val_acc: 1.0000\n",
      "Epoch 17/20\n",
      "100/100 [==============================] - 489s 5s/step - loss: 0.0501 - acc: 0.9890 - val_loss: 0.0069 - val_acc: 1.0000\n",
      "Epoch 18/20\n",
      "100/100 [==============================] - 483s 5s/step - loss: 0.0441 - acc: 0.9880 - val_loss: 0.0068 - val_acc: 1.0000\n",
      "Epoch 19/20\n",
      "100/100 [==============================] - 868s 9s/step - loss: 0.0380 - acc: 0.9890 - val_loss: 0.0057 - val_acc: 1.0000\n",
      "Epoch 20/20\n",
      "  8/100 [=>............................] - ETA: 4:23 - loss: 0.0309 - acc: 1.0000"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-23-f142d43e1bef>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     38\u001b[0m       \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m       \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalidation_generator\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m       validation_steps=50)\n\u001b[0m",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/keras/legacy/interfaces.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     89\u001b[0m                 warnings.warn('Update your `' + object_name + '` call to the ' +\n\u001b[1;32m     90\u001b[0m                               'Keras 2 API: ' + signature, stacklevel=2)\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0mwrapper\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_function\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(self, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m   1416\u001b[0m             \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1417\u001b[0m             \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1418\u001b[0;31m             initial_epoch=initial_epoch)\n\u001b[0m\u001b[1;32m   1419\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1420\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0minterfaces\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegacy_generator_methods_support\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/keras/engine/training_generator.py\u001b[0m in \u001b[0;36mfit_generator\u001b[0;34m(model, generator, steps_per_epoch, epochs, verbose, callbacks, validation_data, validation_steps, class_weight, max_queue_size, workers, use_multiprocessing, shuffle, initial_epoch)\u001b[0m\n\u001b[1;32m    215\u001b[0m                 outs = model.train_on_batch(x, y,\n\u001b[1;32m    216\u001b[0m                                             \u001b[0msample_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msample_weight\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 217\u001b[0;31m                                             class_weight=class_weight)\n\u001b[0m\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    219\u001b[0m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mtrain_on_batch\u001b[0;34m(self, x, y, sample_weight, class_weight)\u001b[0m\n\u001b[1;32m   1215\u001b[0m             \u001b[0mins\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0my\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0msample_weights\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1216\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_train_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1217\u001b[0;31m         \u001b[0moutputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1218\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0munpack_singleton\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1219\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   2719\u001b[0m                     \u001b[0;34m'In order to feed symbolic tensors to a Keras model '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2720\u001b[0m                     'in TensorFlow, you need tensorflow 1.8 or higher.')\n\u001b[0;32m-> 2721\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_legacy_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2722\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2723\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/keras/backend/tensorflow_backend.py\u001b[0m in \u001b[0;36m_legacy_call\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   2691\u001b[0m         \u001b[0msession\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_session\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2692\u001b[0m         updated = session.run(fetches=fetches, feed_dict=feed_dict,\n\u001b[0;32m-> 2693\u001b[0;31m                               **self.session_kwargs)\n\u001b[0m\u001b[1;32m   2694\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mupdated\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2695\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    903\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    904\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[0;32m--> 905\u001b[0;31m                          run_metadata_ptr)\n\u001b[0m\u001b[1;32m    906\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    907\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1138\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfinal_fetches\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mfinal_targets\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mfeed_dict_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1139\u001b[0m       results = self._do_run(handle, final_targets, final_fetches,\n\u001b[0;32m-> 1140\u001b[0;31m                              feed_dict_tensor, options, run_metadata)\n\u001b[0m\u001b[1;32m   1141\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1142\u001b[0m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_run\u001b[0;34m(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1319\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mhandle\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1320\u001b[0m       return self._do_call(_run_fn, feeds, fetches, targets, options,\n\u001b[0;32m-> 1321\u001b[0;31m                            run_metadata)\n\u001b[0m\u001b[1;32m   1322\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1323\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_prun_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeeds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_call\u001b[0;34m(self, fn, *args)\u001b[0m\n\u001b[1;32m   1325\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_do_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1326\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1327\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1328\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOpError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1329\u001b[0m       \u001b[0mmessage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcompat\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mas_text\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run_fn\u001b[0;34m(feed_dict, fetch_list, target_list, options, run_metadata)\u001b[0m\n\u001b[1;32m   1310\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_extend_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1311\u001b[0m       return self._call_tf_sessionrun(\n\u001b[0;32m-> 1312\u001b[0;31m           options, feed_dict, fetch_list, target_list, run_metadata)\n\u001b[0m\u001b[1;32m   1313\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1314\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_prun_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/Users/alejandrotaboada/anaconda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_call_tf_sessionrun\u001b[0;34m(self, options, feed_dict, fetch_list, target_list, run_metadata)\u001b[0m\n\u001b[1;32m   1418\u001b[0m         return tf_session.TF_Run(\n\u001b[1;32m   1419\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_session\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_list\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1420\u001b[0;31m             status, run_metadata)\n\u001b[0m\u001b[1;32m   1421\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1422\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_call_tf_sessionprun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "from keras.preprocessing.image import ImageDataGenerator\n",
    "\n",
    "train_datagen = ImageDataGenerator(\n",
    "      rescale=1./255,\n",
    "      rotation_range=40,\n",
    "      width_shift_range=0.2,\n",
    "      height_shift_range=0.2,\n",
    "      shear_range=0.2,\n",
    "      zoom_range=0.2,\n",
    "      horizontal_flip=True,\n",
    "      fill_mode='nearest')\n",
    "\n",
    "# ¡Notar que la data de validación no debe ser aumentada!\n",
    "test_datagen = ImageDataGenerator(rescale=1./255)\n",
    "\n",
    "train_generator = train_datagen.flow_from_directory(\n",
    "        # Directorio target\n",
    "        train_dir,\n",
    "        # Reescalamos a 150x150\n",
    "        target_size=(150, 150),\n",
    "        batch_size=10,\n",
    "        # Usamos binary_crossentropy y etiquetas binarias\n",
    "        class_mode='binary')\n",
    "\n",
    "validation_generator = test_datagen.flow_from_directory(\n",
    "        validation_dir,\n",
    "        target_size=(150, 150),\n",
    "        batch_size=10,\n",
    "        class_mode='binary')\n",
    "\n",
    "model.compile(loss='binary_crossentropy',\n",
    "              optimizer=optimizers.RMSprop(lr=2e-5),\n",
    "              metrics=['acc'])\n",
    "\n",
    "history = model.fit_generator(\n",
    "      train_generator,\n",
    "      steps_per_epoch=100,\n",
    "      epochs=20,\n",
    "      validation_data=validation_generator,\n",
    "      validation_steps=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "collapsed": true,
    "id": "eNdG3x9lVb2o"
   },
   "outputs": [],
   "source": [
    "model.save('cats_and_dogs_small_3.h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "Ae15gHn6Vb2p"
   },
   "source": [
    "Ploteamos el resultado del entrenamiento:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 545
    },
    "colab_type": "code",
    "id": "PpyfsL1kVb2q",
    "outputId": "6a6f1f27-75ab-463d-8513-62cd186370f7"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n0BcAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x127ba09e8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x128b805c0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "acc = history.history['acc']\n",
    "val_acc = history.history['val_acc']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "epochs = range(len(acc))\n",
    "\n",
    "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
    "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.legend()\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "SIobnjrZVb2t"
   },
   "source": [
    "Vemos que la accuracy en el dataset de validacion llego al 96%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "ivD9IsjVVb2u"
   },
   "source": [
    "## Fine-tuning\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "FIpdrnhOVb2v"
   },
   "source": [
    "Estos son los pasos que vamos a seguir:\n",
    "\n",
    "1) Agregar la red personalizada sobre una red base ya entrenada.\n",
    "\n",
    "2) Congelar la red base.\n",
    "\n",
    "3) Entrenar la parte que nueva.\n",
    "\n",
    "4) Descongelar algunas capas en la red base.\n",
    "\n",
    "5) Entrenar conjuntamente estas capas y la parte que nueva.\n",
    "\n",
    "Hemos completado los primeros 3 pasos cuando realizamos feature extraction.\n",
    "Avancemos con el 4º paso: descongelaremos nuestra conv_base y luego congelaremos capas individuales dentro de ella.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "CxJBErXvVb2y"
   },
   "source": [
    "Vamos a hace fine tuning de las ultimas 3 capas convolucionales. Esto significa que de la capa `block5_conv1` van a tener que estar marcadas como entrenables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 363
    },
    "colab_type": "code",
    "id": "x3AfExn7Emhv",
    "outputId": "d5639b46-f0ee-4985-b53c-9acc1e43ac59"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "input_1 False\n",
      "block1_conv1 True\n",
      "block1_conv2 True\n",
      "block1_pool True\n",
      "block2_conv1 True\n",
      "block2_conv2 True\n",
      "block2_pool True\n",
      "block3_conv1 True\n",
      "block3_conv2 True\n",
      "block3_conv3 True\n",
      "block3_pool True\n",
      "block4_conv1 True\n",
      "block4_conv2 True\n",
      "block4_conv3 True\n",
      "block4_pool True\n",
      "block5_conv1 True\n",
      "block5_conv2 True\n",
      "block5_conv3 True\n",
      "block5_pool True\n"
     ]
    }
   ],
   "source": [
    "# Antes de modificar el atributo trainable\n",
    "for layer in conv_base.layers:\n",
    "  print(layer.name, layer.trainable)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "collapsed": true,
    "id": "fVrE9-QXVb2y"
   },
   "outputs": [],
   "source": [
    "conv_base.trainable = True\n",
    "\n",
    "set_trainable = False\n",
    "for layer in conv_base.layers:\n",
    "    if layer.name == 'block5_conv1':\n",
    "        set_trainable = True\n",
    "    layer.trainable = set_trainable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 363
    },
    "colab_type": "code",
    "id": "aEnipgBhFGt_",
    "outputId": "eb04d5ca-4c7b-4f52-d124-cd2e4d551c0b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "input_1 False\n",
      "block1_conv1 False\n",
      "block1_conv2 False\n",
      "block1_pool False\n",
      "block2_conv1 False\n",
      "block2_conv2 False\n",
      "block2_pool False\n",
      "block3_conv1 False\n",
      "block3_conv2 False\n",
      "block3_conv3 False\n",
      "block3_pool False\n",
      "block4_conv1 False\n",
      "block4_conv2 False\n",
      "block4_conv3 False\n",
      "block4_pool False\n",
      "block5_conv1 True\n",
      "block5_conv2 True\n",
      "block5_conv3 True\n",
      "block5_pool True\n"
     ]
    }
   ],
   "source": [
    "# Después de modificar el atributo trainable\n",
    "for layer in conv_base.layers:\n",
    "  print(layer.name, layer.trainable)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "wBfLfTr3Vb20"
   },
   "source": [
    "Entrenamos el modelo con un learning rate menos para evitar que se danen las representaciones:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 3654
    },
    "colab_type": "code",
    "id": "df_RN0U0Vb20",
    "outputId": "6c92a5b0-722f-48c6-98d1-99ed1a98d0f3"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/100\n",
      "100/100 [==============================] - 21s 208ms/step - loss: 0.2970 - acc: 0.8690 - val_loss: 0.2272 - val_acc: 0.9060\n",
      "Epoch 2/100\n",
      "100/100 [==============================] - 18s 176ms/step - loss: 0.2438 - acc: 0.8970 - val_loss: 0.2642 - val_acc: 0.9020\n",
      "Epoch 3/100\n",
      "100/100 [==============================] - 18s 178ms/step - loss: 0.2370 - acc: 0.8985 - val_loss: 0.2184 - val_acc: 0.9070\n",
      "Epoch 4/100\n",
      "100/100 [==============================] - 19s 188ms/step - loss: 0.2300 - acc: 0.9035 - val_loss: 0.2057 - val_acc: 0.9230\n",
      "Epoch 5/100\n",
      "100/100 [==============================] - 18s 176ms/step - loss: 0.2066 - acc: 0.9155 - val_loss: 0.2122 - val_acc: 0.9240\n",
      "Epoch 6/100\n",
      "100/100 [==============================] - 18s 176ms/step - loss: 0.1913 - acc: 0.9125 - val_loss: 0.1911 - val_acc: 0.9220\n",
      "Epoch 7/100\n",
      "100/100 [==============================] - 18s 176ms/step - loss: 0.1667 - acc: 0.9305 - val_loss: 0.2292 - val_acc: 0.9220\n",
      "Epoch 8/100\n",
      "100/100 [==============================] - 19s 189ms/step - loss: 0.1578 - acc: 0.9320 - val_loss: 0.2104 - val_acc: 0.9210\n",
      "Epoch 9/100\n",
      "100/100 [==============================] - 17s 175ms/step - loss: 0.1624 - acc: 0.9380 - val_loss: 0.2616 - val_acc: 0.9070\n",
      "Epoch 10/100\n",
      "100/100 [==============================] - 17s 175ms/step - loss: 0.1362 - acc: 0.9435 - val_loss: 0.1911 - val_acc: 0.9250\n",
      "Epoch 11/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.1554 - acc: 0.9335 - val_loss: 0.2543 - val_acc: 0.9180\n",
      "Epoch 12/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.1316 - acc: 0.9450 - val_loss: 0.1947 - val_acc: 0.9270\n",
      "Epoch 13/100\n",
      "100/100 [==============================] - 19s 187ms/step - loss: 0.1252 - acc: 0.9485 - val_loss: 0.1850 - val_acc: 0.9260\n",
      "Epoch 14/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.1243 - acc: 0.9575 - val_loss: 0.1924 - val_acc: 0.9340\n",
      "Epoch 15/100\n",
      "100/100 [==============================] - 18s 180ms/step - loss: 0.1275 - acc: 0.9505 - val_loss: 0.2200 - val_acc: 0.9260\n",
      "Epoch 16/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.1178 - acc: 0.9520 - val_loss: 0.2316 - val_acc: 0.9210\n",
      "Epoch 17/100\n",
      "100/100 [==============================] - 19s 187ms/step - loss: 0.1056 - acc: 0.9575 - val_loss: 0.2056 - val_acc: 0.9370\n",
      "Epoch 18/100\n",
      "100/100 [==============================] - 19s 190ms/step - loss: 0.1097 - acc: 0.9605 - val_loss: 0.1997 - val_acc: 0.9380\n",
      "Epoch 19/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0974 - acc: 0.9595 - val_loss: 0.1951 - val_acc: 0.9370\n",
      "Epoch 20/100\n",
      "100/100 [==============================] - 18s 175ms/step - loss: 0.1024 - acc: 0.9615 - val_loss: 0.2866 - val_acc: 0.9030\n",
      "Epoch 21/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0893 - acc: 0.9615 - val_loss: 0.2026 - val_acc: 0.9310\n",
      "Epoch 22/100\n",
      "100/100 [==============================] - 19s 186ms/step - loss: 0.1020 - acc: 0.9550 - val_loss: 0.2085 - val_acc: 0.9310\n",
      "Epoch 23/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0857 - acc: 0.9675 - val_loss: 0.2055 - val_acc: 0.9360\n",
      "Epoch 24/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0782 - acc: 0.9650 - val_loss: 0.2082 - val_acc: 0.9260\n",
      "Epoch 25/100\n",
      "100/100 [==============================] - 17s 172ms/step - loss: 0.0687 - acc: 0.9775 - val_loss: 0.2216 - val_acc: 0.9260\n",
      "Epoch 26/100\n",
      "100/100 [==============================] - 18s 185ms/step - loss: 0.0774 - acc: 0.9685 - val_loss: 0.2202 - val_acc: 0.9320\n",
      "Epoch 27/100\n",
      "100/100 [==============================] - 17s 175ms/step - loss: 0.0819 - acc: 0.9665 - val_loss: 0.2077 - val_acc: 0.9240\n",
      "Epoch 28/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0868 - acc: 0.9685 - val_loss: 0.2238 - val_acc: 0.9210\n",
      "Epoch 29/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0873 - acc: 0.9715 - val_loss: 0.1875 - val_acc: 0.9310\n",
      "Epoch 30/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0704 - acc: 0.9750 - val_loss: 0.2272 - val_acc: 0.9340\n",
      "Epoch 31/100\n",
      "100/100 [==============================] - 19s 187ms/step - loss: 0.0542 - acc: 0.9805 - val_loss: 0.2145 - val_acc: 0.9300\n",
      "Epoch 32/100\n",
      "100/100 [==============================] - 18s 181ms/step - loss: 0.0646 - acc: 0.9765 - val_loss: 0.2120 - val_acc: 0.9310\n",
      "Epoch 33/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0569 - acc: 0.9795 - val_loss: 0.2233 - val_acc: 0.9230\n",
      "Epoch 34/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0655 - acc: 0.9765 - val_loss: 0.2126 - val_acc: 0.9270\n",
      "Epoch 35/100\n",
      "100/100 [==============================] - 18s 184ms/step - loss: 0.0627 - acc: 0.9795 - val_loss: 0.2490 - val_acc: 0.9260\n",
      "Epoch 36/100\n",
      "100/100 [==============================] - 18s 184ms/step - loss: 0.0664 - acc: 0.9795 - val_loss: 0.2334 - val_acc: 0.9280\n",
      "Epoch 37/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0577 - acc: 0.9790 - val_loss: 0.1959 - val_acc: 0.9340\n",
      "Epoch 38/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0515 - acc: 0.9815 - val_loss: 0.2571 - val_acc: 0.9290\n",
      "Epoch 39/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0593 - acc: 0.9815 - val_loss: 0.2249 - val_acc: 0.9280\n",
      "Epoch 40/100\n",
      "100/100 [==============================] - 19s 187ms/step - loss: 0.0497 - acc: 0.9835 - val_loss: 0.2008 - val_acc: 0.9320\n",
      "Epoch 41/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0567 - acc: 0.9810 - val_loss: 0.2452 - val_acc: 0.9310\n",
      "Epoch 42/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0576 - acc: 0.9755 - val_loss: 0.2181 - val_acc: 0.9290\n",
      "Epoch 43/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0502 - acc: 0.9810 - val_loss: 0.2418 - val_acc: 0.9320\n",
      "Epoch 44/100\n",
      "100/100 [==============================] - 18s 182ms/step - loss: 0.0474 - acc: 0.9820 - val_loss: 0.2288 - val_acc: 0.9340\n",
      "Epoch 45/100\n",
      "100/100 [==============================] - 18s 179ms/step - loss: 0.0440 - acc: 0.9835 - val_loss: 0.2706 - val_acc: 0.9290\n",
      "Epoch 46/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0364 - acc: 0.9870 - val_loss: 0.2869 - val_acc: 0.9270\n",
      "Epoch 47/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0463 - acc: 0.9850 - val_loss: 0.1935 - val_acc: 0.9380\n",
      "Epoch 48/100\n",
      "100/100 [==============================] - 17s 175ms/step - loss: 0.0331 - acc: 0.9905 - val_loss: 0.2308 - val_acc: 0.9340\n",
      "Epoch 49/100\n",
      "100/100 [==============================] - 19s 192ms/step - loss: 0.0511 - acc: 0.9780 - val_loss: 0.2766 - val_acc: 0.9260\n",
      "Epoch 50/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0377 - acc: 0.9845 - val_loss: 0.2325 - val_acc: 0.9370\n",
      "Epoch 51/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0512 - acc: 0.9800 - val_loss: 0.2621 - val_acc: 0.9230\n",
      "Epoch 52/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0431 - acc: 0.9860 - val_loss: 0.2985 - val_acc: 0.9200\n",
      "Epoch 53/100\n",
      "100/100 [==============================] - 19s 192ms/step - loss: 0.0384 - acc: 0.9860 - val_loss: 0.2531 - val_acc: 0.9290\n",
      "Epoch 54/100\n",
      "100/100 [==============================] - 18s 181ms/step - loss: 0.0326 - acc: 0.9860 - val_loss: 0.3230 - val_acc: 0.9200\n",
      "Epoch 55/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0408 - acc: 0.9850 - val_loss: 0.2569 - val_acc: 0.9350\n",
      "Epoch 56/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0308 - acc: 0.9875 - val_loss: 0.2793 - val_acc: 0.9350\n",
      "Epoch 57/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0315 - acc: 0.9875 - val_loss: 0.2199 - val_acc: 0.9290\n",
      "Epoch 58/100\n",
      "100/100 [==============================] - 19s 186ms/step - loss: 0.0327 - acc: 0.9885 - val_loss: 0.2137 - val_acc: 0.9440\n",
      "Epoch 59/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0404 - acc: 0.9870 - val_loss: 0.2341 - val_acc: 0.9320\n",
      "Epoch 60/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0362 - acc: 0.9865 - val_loss: 0.2074 - val_acc: 0.9370\n",
      "Epoch 61/100\n",
      "100/100 [==============================] - 17s 175ms/step - loss: 0.0361 - acc: 0.9890 - val_loss: 0.2414 - val_acc: 0.9350\n",
      "Epoch 62/100\n",
      "100/100 [==============================] - 18s 178ms/step - loss: 0.0378 - acc: 0.9875 - val_loss: 0.2760 - val_acc: 0.9310\n",
      "Epoch 63/100\n",
      "100/100 [==============================] - 18s 182ms/step - loss: 0.0344 - acc: 0.9885 - val_loss: 0.2855 - val_acc: 0.9300\n",
      "Epoch 64/100\n",
      "100/100 [==============================] - 18s 175ms/step - loss: 0.0293 - acc: 0.9905 - val_loss: 0.2463 - val_acc: 0.9390\n",
      "Epoch 65/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0304 - acc: 0.9890 - val_loss: 0.2425 - val_acc: 0.9350\n",
      "Epoch 66/100\n",
      "100/100 [==============================] - 18s 177ms/step - loss: 0.0279 - acc: 0.9895 - val_loss: 0.2753 - val_acc: 0.9320\n",
      "Epoch 67/100\n",
      "100/100 [==============================] - 19s 192ms/step - loss: 0.0305 - acc: 0.9895 - val_loss: 0.1941 - val_acc: 0.9370\n",
      "Epoch 68/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0291 - acc: 0.9885 - val_loss: 0.2340 - val_acc: 0.9440\n",
      "Epoch 69/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0388 - acc: 0.9860 - val_loss: 0.2745 - val_acc: 0.9320\n",
      "Epoch 70/100\n",
      "100/100 [==============================] - 18s 179ms/step - loss: 0.0229 - acc: 0.9925 - val_loss: 0.3233 - val_acc: 0.9260\n",
      "Epoch 71/100\n",
      "100/100 [==============================] - 19s 190ms/step - loss: 0.0272 - acc: 0.9890 - val_loss: 0.4272 - val_acc: 0.9150\n",
      "Epoch 72/100\n",
      "100/100 [==============================] - 18s 180ms/step - loss: 0.0290 - acc: 0.9885 - val_loss: 0.2872 - val_acc: 0.9340\n",
      "Epoch 73/100\n",
      "100/100 [==============================] - 18s 175ms/step - loss: 0.0231 - acc: 0.9910 - val_loss: 0.2566 - val_acc: 0.9440\n",
      "Epoch 74/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0299 - acc: 0.9910 - val_loss: 0.3808 - val_acc: 0.9230\n",
      "Epoch 75/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0244 - acc: 0.9935 - val_loss: 0.2480 - val_acc: 0.9410\n",
      "Epoch 76/100\n",
      "100/100 [==============================] - 19s 185ms/step - loss: 0.0355 - acc: 0.9915 - val_loss: 0.3235 - val_acc: 0.9300\n",
      "Epoch 77/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0224 - acc: 0.9885 - val_loss: 0.3102 - val_acc: 0.9250\n",
      "Epoch 78/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0257 - acc: 0.9880 - val_loss: 0.2873 - val_acc: 0.9380\n",
      "Epoch 79/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0252 - acc: 0.9900 - val_loss: 0.2377 - val_acc: 0.9460\n",
      "Epoch 80/100\n",
      "100/100 [==============================] - 18s 175ms/step - loss: 0.0247 - acc: 0.9895 - val_loss: 0.2513 - val_acc: 0.9390\n",
      "Epoch 81/100\n",
      "100/100 [==============================] - 18s 184ms/step - loss: 0.0283 - acc: 0.9915 - val_loss: 0.2197 - val_acc: 0.9430\n",
      "Epoch 82/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0218 - acc: 0.9915 - val_loss: 0.2474 - val_acc: 0.9410\n",
      "Epoch 83/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0139 - acc: 0.9940 - val_loss: 0.2733 - val_acc: 0.9410\n",
      "Epoch 84/100\n",
      "100/100 [==============================] - 18s 180ms/step - loss: 0.0222 - acc: 0.9940 - val_loss: 0.2462 - val_acc: 0.9370\n",
      "Epoch 85/100\n",
      "100/100 [==============================] - 19s 189ms/step - loss: 0.0171 - acc: 0.9945 - val_loss: 0.2515 - val_acc: 0.9420\n",
      "Epoch 86/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0268 - acc: 0.9905 - val_loss: 0.2415 - val_acc: 0.9440\n",
      "Epoch 87/100\n",
      "100/100 [==============================] - 18s 175ms/step - loss: 0.0238 - acc: 0.9905 - val_loss: 0.2536 - val_acc: 0.9400\n",
      "Epoch 88/100\n",
      "100/100 [==============================] - 19s 188ms/step - loss: 0.0158 - acc: 0.9925 - val_loss: 0.4343 - val_acc: 0.9180\n",
      "Epoch 89/100\n",
      "100/100 [==============================] - 18s 176ms/step - loss: 0.0167 - acc: 0.9945 - val_loss: 0.2556 - val_acc: 0.9400\n",
      "Epoch 90/100\n",
      "100/100 [==============================] - 18s 184ms/step - loss: 0.0198 - acc: 0.9940 - val_loss: 0.3704 - val_acc: 0.9370\n",
      "Epoch 91/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0271 - acc: 0.9925 - val_loss: 0.2309 - val_acc: 0.9470\n",
      "Epoch 92/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0201 - acc: 0.9920 - val_loss: 0.3636 - val_acc: 0.9340\n",
      "Epoch 93/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0171 - acc: 0.9935 - val_loss: 0.2900 - val_acc: 0.9340\n",
      "Epoch 94/100\n",
      "100/100 [==============================] - 19s 188ms/step - loss: 0.0227 - acc: 0.9925 - val_loss: 0.2299 - val_acc: 0.9460\n",
      "Epoch 95/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0160 - acc: 0.9940 - val_loss: 0.3339 - val_acc: 0.9340\n",
      "Epoch 96/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0215 - acc: 0.9935 - val_loss: 0.2653 - val_acc: 0.9420\n",
      "Epoch 97/100\n",
      "100/100 [==============================] - 17s 173ms/step - loss: 0.0168 - acc: 0.9940 - val_loss: 0.2872 - val_acc: 0.9410\n",
      "Epoch 98/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0231 - acc: 0.9940 - val_loss: 0.3206 - val_acc: 0.9340\n",
      "Epoch 99/100\n",
      "100/100 [==============================] - 19s 186ms/step - loss: 0.0206 - acc: 0.9915 - val_loss: 0.2772 - val_acc: 0.9390\n",
      "Epoch 100/100\n",
      "100/100 [==============================] - 17s 174ms/step - loss: 0.0147 - acc: 0.9950 - val_loss: 0.2795 - val_acc: 0.9370\n"
     ]
    }
   ],
   "source": [
    "model.compile(loss='binary_crossentropy',\n",
    "              optimizer=optimizers.RMSprop(lr=1e-5),\n",
    "              metrics=['acc'])\n",
    "\n",
    "history = model.fit_generator(\n",
    "      train_generator,\n",
    "      steps_per_epoch=100,\n",
    "      epochs=100,\n",
    "      validation_data=validation_generator,\n",
    "      validation_steps=50)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 0,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "collapsed": true,
    "id": "I3skCwpGVb22"
   },
   "outputs": [],
   "source": [
    "model.save('cats_and_dogs_small_4.h5')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "1VTrYIk8Vb24"
   },
   "source": [
    "Volvemos a plotear:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 545
    },
    "colab_type": "code",
    "id": "7yM4ZDp6Vb24",
    "outputId": "59b1ca49-93fb-4e3f-a1ad-ef6461ee9f61"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nW2c2lr4+06GDTj4zbZr+TmLvubfckDtxPXr10ieaHTuSW/oNBRP95PQHFjvnljjntgMvALGeuyLA\nS8802dvunFvonFsU+bwCWA1kbChE2CgZUIvtnHM0AdjmzdFQRoj68zt31giV8nKdyLpVq9RzqTRr\nplEEN9yQvGyseydZsrXqctBBek3xpuszlGHDovOcBol+tlj627ertb9uXXaIftOm0X4wE/34dAK+\n8y2XRdb5mQWcG/l8DrCniFSaNlhE+gNNgCqZS0RkuIiUiEhJeaqTkKZAaal2QqXyw4039N4v+t5A\no88+0/DP6sy1GTY3Szyffm11FGYypK4hIKJ5hW66qepgs5//XKPDYjOINkS8CB4vNDkb3DsQFXsT\n/epzCzBQRL4ABgLLgd3TdohIR+A54HLnXJUcjM650c65YudccftaHBO9bJkKdSodn8lEf++9o77v\ndMxclIi68Okb4enYER58UPt//DRurC7CoDTZDQlvjlsvNDkbLH2IunisIzc+y4H9fMudI+t245xb\n4Zw71zl3ODAism49gIi0At4ERjjnYqYOqVtKS8O5dvzst5/+iWNFf489opa3N7Q8VX9+qvh9+rt2\nmegbtU+TJir8n3yiy9lk6bdqlf6Efg2BMDbvdOBAEemGiv2FwEX+AiJSAKyNWPG3AU9F1jcBXkY7\neeNk565bli3TkLtUaNRIfbOxot+5czQc7/LLdZBXbDbNdOPF/2/YoIODdu0y0Tdqn169oumys8XS\nHzYsfCLBbCOppe+c2wlcB0wE5gMvOefmishIETk7Uuw4YIGILAQ6AN704ecDA4DLROTLyKtPui8i\nDF70gRe5M25cdLLrrl11OYjYoffLl1e2eLp318k5wg7Kqi75+XqODRvSm4LBMBLh+fWbNUvPQMD6\nwH/8h87OlouE8m47594C3opZd6fv83igiiXvnBsL1IthOmVlahl7Aj98eHRy8mXLdBniz5R1wAGa\nHtg5te7LyqK5auoaL/+Oib5RV3ii36lTwx5sZig5MyLXH6M/YkRU8D22bNH18ejeXd0p5eWaNmHF\niuR5cmoLL/+Oib5RV3jpGLLFtZPr5Ewmab/ox04L6BG03h/BU1GhqRkyKfpm6Rt1SefOmtQvU795\nI73kjOiXluqj6X776QhYrxHwEzS5tl/0vfj1TIr+mjXpzbBpGIkQ0XTIJvrZQU65dzp21NF4o0ZV\n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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "acc = history.history['acc']\n",
    "val_acc = history.history['val_acc']\n",
    "loss = history.history['loss']\n",
    "val_loss = history.history['val_loss']\n",
    "\n",
    "epochs = range(len(acc))\n",
    "\n",
    "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
    "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.legend()\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
    "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "j1irw_jgVb26"
   },
   "source": [
    "Para que las curvas sean mas legibles, vamos a aplicar un suavizado exponencial:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 545
    },
    "colab_type": "code",
    "id": "EJ6hW6zJVb27",
    "outputId": "089ec2dc-fdec-4292-c361-64075750d6cf"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\nf9q1a8e9996bX7YPPviAHj160LVrVwYPHsz+/fsBeO+992jfvj1du3bljTfeOOGajh49ykMPPcTM\nmTNJT09n5syZPPzwwwwfPpyePXsyfPhwMjMz6dWrF127dqVr1658+umngPtS6tSpE+B+hVxxxRVF\nli0lJYUffviBzMxMzjrrLEaMGEHHjh258MILOXToEACLFy/O//UUeC9C7d+/n759+9K1a1dSU1N5\n66238re9+uqrpKWl0blzZ4YPHw7Arl27GDRoEJ07d6Zz58755a50qlrsA0gANgKnA7WAr4EOIftM\nAm7xljsAmd7ytcAMb7kekAmkFPd63bp100iaNk01OVlVxP07bVpET2/i2KpVq3zvK6Lq6viFHyJl\nf/19+/Zp586dtV27dnrLLbfo/Pnz87clJyfrc889p6qqd955p6ampurevXv1+++/11NOOUVVVWfP\nnq39+vXT3Nxc3blzp7Zq1Uq3b98edv28efP0kksuyX+NyZMna5s2bTQnJ0cPHTqkrVu31i1btmhW\nVpb26tVL9+/fr6qqjzzyiI4dO1YPHTqkSUlJum7dOs3Ly9PBgwcXOl/weW+77bb853/4wx+0a9eu\nevDgQVVVPXDggB46dEhVVdetW6eBmPHtt99qx44diy1b4L3JysrSb7/9VhMSEvSrr75SVdXBgwfr\n1KlTVVW1Y8eO+umnn6qq6qhRo/LPG+zYsWO6Z88eVVXNysrStm3bal5enq5YsULbtWunWVlZqqqa\nnZ2tqqpXXXWVPvHEE6qqmpubqzk5OSV/yGEU9bcHLNES4rmq+qrpdwc2qOomVT0KzAAuD/3uABp5\ny42B7UHr64vISUBd4CiwtxTfSeVi3TRNVVERbUoNGjRg6dKlTJo0iebNmzNkyBBeeeWV/O0DBw4E\nIDU1lXPOOYeGDRvSvHlzateuTU5ODp988gnXXHMNCQkJtGjRgt69e7N48eKw64vSt29fGjduTJ06\ndejQoQObN2/m888/Z9WqVfTs2ZP09HSmTJnC5s2bWbNmDW3atKFdu3aICMOGDfN9rQMHDqRu3bqA\nGxQ3YsQIUlNTGTx4MKtWrfJdtlBt2rQhPT0dgG7dupGZmUlOTg779u2jR48eAFx77bVFnl9Vuf/+\n+0lLS6Nfv35s27aNXbt2MXfuXAYPHkyzZs0AaNq0KQBz587llltuASAhIYHGjRv7vv5I8jM4qyXw\n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\ngg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "tags": []
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def smooth_curve(points, factor=0.8):\n",
    "  smoothed_points = []\n",
    "  for point in points:\n",
    "    if smoothed_points:\n",
    "      previous = smoothed_points[-1]\n",
    "      smoothed_points.append(previous * factor + point * (1 - factor))\n",
    "    else:\n",
    "      smoothed_points.append(point)\n",
    "  return smoothed_points\n",
    "\n",
    "plt.plot(epochs,\n",
    "         smooth_curve(acc), 'bo', label='Smoothed training acc')\n",
    "plt.plot(epochs,\n",
    "         smooth_curve(val_acc), 'b', label='Smoothed validation acc')\n",
    "plt.title('Training and validation accuracy')\n",
    "plt.legend()\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "plt.plot(epochs,\n",
    "         smooth_curve(loss), 'bo', label='Smoothed training loss')\n",
    "plt.plot(epochs,\n",
    "         smooth_curve(val_loss), 'b', label='Smoothed validation loss')\n",
    "plt.title('Training and validation loss')\n",
    "plt.legend()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "_wq2xXUdVb2-"
   },
   "source": [
    "Ahora podemos finalmente evaluar este modelo en los datos de prueba:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 54
    },
    "colab_type": "code",
    "id": "rB787jNxVb2-",
    "outputId": "15bf5b9c-3cb5-4e5e-9334-0ef585785edd"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 80 images belonging to 2 classes.\n",
      "test acc: 0.8739999973773956\n"
     ]
    }
   ],
   "source": [
    "test_generator = test_datagen.flow_from_directory(\n",
    "        test_dir,\n",
    "        target_size=(150, 150),\n",
    "        batch_size=20,\n",
    "        class_mode='binary')\n",
    "\n",
    "test_loss, test_acc = model.evaluate_generator(test_generator, steps=50)\n",
    "print('test acc:', test_acc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/alejandrotaboada/Desktop/Pruebas Python/train/cats/'"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dir = train_dir + '/cats/'\n",
    "dir"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "mkvgStjHK9DN"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "80"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len([name for name in os.listdir(dir)])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "1.PRACTICA_GUIADA_Usando_redes_preentrenadas.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
